type error = {
    code: int;
    message: string;
}

type failure = {
    id: int;
    error: error;
}

type response = {
    ~jsonrpc <python default="'2.0'">: string;
    id: int;
    result: abstract;
}

type request = {
    ~jsonrpc <python default="'2.0'">: string;
    id: int;
    method_ <json name="method">: string;
    params: abstract
}

type opts = {
    ~memo <python default="True">: bool;
    ~hash <python default="True">: bool;
}

type start_params = {
    ?pre_commands: string option;
    ?opts: opts option;
    uri: string;
    thm: string;
}

type run_params = {
    ?opts: opts option;
    st: int;
    tac: string;
}

type state = {
    st: int;
    ?hash: int option;
    proof_finished: bool;
}

type goals_params = {
    st: int;
}

type goal_hyp = {
    names: string list;
    ?def_ <json name="def">: abstract option;
    ty: string;
}

type goal = {
    info: abstract;
    hyps: goal_hyp list;
    ty: string;
    ?pp: string option;
}

type goals_response = {
    goals : goal list;
    stack: (abstract list * abstract list) list;
    shelf: abstract list;
    given_up: abstract list
}

type premises_params = {
    st: int;
}

type premises_response = abstract

type inspect = [ 
    InspectPhysical <json name="Physical"> | 
    InspectGoals <json name="Goals"> 
] 

type state_equal_params = {
    kind: inspect;
    st1: int;
    st2: int;
}

type state_equal_response = bool

type state_hash_params = {
    st: int;
}

type state_hash_response = int

type set_workspace_params = {
    debug: bool;
    root: string;
}

type toc_params = {
    uri: string;
}

type toc_response = (string * abstract) list